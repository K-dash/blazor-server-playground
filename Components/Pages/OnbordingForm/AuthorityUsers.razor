@implements IDisposable
@inject TooltipService tooltipService


<RadzenFieldset Text="">
    <RadzenStack Gap="2rem" class="rz-p-4 rz-p-md-4">
        <RadzenRow AlignItems="AlignItems.Center" RowGap="2rem" Gap="1rem">
            <RadzenColumn Size="0" SizeMD="0">
                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Left" style="color: var(--rz-text-tertiary-color)" >
                        ※1時間単位での設定となります。（AM5:30などは不可）
                    </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="0" SizeMD="0">
                <RadzenButton Icon="add_circle_outline" Text="ユーザ追加" Click="@AddUser" Style="background-color: #337AB7; color: white;"
                MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Position = TooltipPosition.Right }))" />
            </RadzenColumn>
                @for (int i = 0; i < Customer.authorityUsers.Count; i++)
                {
                    var index = i;
                    <RadzenColumn Size="0" SizeMD="10">
                        <RadzenTextBox
                            Value="@Customer.authorityUsers[index]"
                            ValueChanged="@(value => UpdateUser(index, value))"
                            Placeholder="権限ユーザのフルネームを入力" Style="width: 100%;">
                        </RadzenTextBox>
                    </RadzenColumn>
                    <RadzenButton Style="background-color: #ff4d4d; color: white;" Icon="delete" Click="@(() => RemoveUser(index))" />
                }
        </RadzenRow>
    </RadzenStack>
</RadzenFieldset>

@code {
    [Parameter]
    public CustomerInfo Customer { get; set; }

    [Parameter]
    public EventCallback<CustomerInfo> CustomerChanged { get; set; }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) =>
        tooltipService.Open(elementReference, "複数の権限ユーザを追加する場合はこちらから追加してください", options);


    protected override void OnInitialized()
    {
        if (Customer.authorityUsers == null)
        {
            Customer.authorityUsers = new List<string>();
        }
        if (Customer.authorityUsers.Count == 0)
        {
            Customer.authorityUsers.Add(Customer.FullName ?? string.Empty);
        }
    }

    private void AddUser()
    {
        Customer.authorityUsers.Add(string.Empty);
        CustomerChanged.InvokeAsync(Customer);
    }

    private void UpdateUser(int index, string value)
    {
        if (index >= 0 && index < Customer.authorityUsers.Count)
        {
            Customer.authorityUsers[index] = value;
            CustomerChanged.InvokeAsync(Customer);
        }
    }

    private void RemoveUser(int index)
    {
        if (index >= 0 && index < Customer.authorityUsers.Count)
        {
            Customer.authorityUsers.RemoveAt(index);
            if (Customer.authorityUsers.Count == 0)
            {
                Customer.authorityUsers.Add(string.Empty);
            }
            CustomerChanged.InvokeAsync(Customer);
        }
    }

    public void Dispose()
    {
        // 必要に応じてリソースのクリーンアップを行う
    }
}
